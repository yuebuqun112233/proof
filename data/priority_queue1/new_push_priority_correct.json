{
    "packages": "Main",
    "theorem name": "new_push_priority_correct",
    "function names": ["values","priority","push"],
    "other formal": "typedef (overloaded) ('a, 'b::linorder) pri_queue =\n  \"{xs :: ('a \\<times> 'b) list. distinct (map fst xs) \\<and> sorted (map snd xs)}\"\n  morphisms alist_of Abs_pq\nproof -\n  have \"[] \\<in> ?pri_queue\" by simp\n  then show ?thesis by blast\nqed \n",
  "other rules": ["alist_of_inverse", "alist_of", "Abs_pq_inverse", "Abs_pq_inject"],
    "formal function definitions": {
      "priority": "definition priority :: \"('a, 'b::linorder) pri_queue \\<Rightarrow> 'a \\<Rightarrow> 'b option\" where\n  \"priority q \\<equiv> map_of (alist_of q)\"",
      "push": "definition push :: \"'a \\<Rightarrow> 'b::linorder \\<Rightarrow> ('a, 'b) pri_queue \\<Rightarrow> ('a, 'b) pri_queue\" where\n  \"push k p q \\<equiv> Abs_pq (if k \\<notin> set (values q)\n           then insort_key snd (k, p) (alist_of q)\n           else alist_of q)\"",
      "values": "definition \"values\" :: \"('a, 'b::linorder) pri_queue \\<Rightarrow> 'a list\" (\"|(_)|\") where\n  \"values q = map fst (alist_of q)\""
    },
    "formal theorem statement": "theorem new_push_priority_correct:assumes a1:\"k \\<notin> set |q|\" \n  shows\" priority (push k p q) k = Some p\""
}