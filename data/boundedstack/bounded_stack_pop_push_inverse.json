{
	"packages": "Main",
	"theorem name": "bounded_stack_pop_push_inverse",
	"function names": ["capacity","size","isfull","isempty","pop","push"],
	"other formal": "\ntypedef (overloaded) 'a bstack =\n \"{xs :: ('a list \\<times> nat). length (fst xs) \\<le> snd xs}\"\n morphisms alist_of Abs_bstack\nproof -\n have \"([],0) \\<in> {xs. length (fst xs) \\<le> snd xs}\" by simp\n thus ?thesis by blast\nqed",
  "other rules": ["alist_of_inverse", "alist_of", "Abs_bstack_inverse", "Abs_bstack_inject"],
	"formal function definitions": {
		"capacity": "definition capacity :: \"'a bstack \\<Rightarrow> nat\"\nwhere \"capacity s \\<equiv> snd (alist_of s)\"",
        "size": "definition size :: \"'a bstack \\<Rightarrow> nat\"\nwhere \"size s \\<equiv> length (fst (alist_of s))\"",
        "isfull": "definition isfull :: \"'a bstack \\<Rightarrow> bool\"\nwhere \"isfull s \\<equiv> size s = capacity s\"",
        "isempty": "definition isempty :: \"'a bstack \\<Rightarrow> bool\"\nwhere \"isempty s \\<equiv> fst (alist_of s) = []\"",
        "push": "definition push :: \"'a \\<Rightarrow> 'a bstack \\<Rightarrow> 'a bstack\"\nwhere \"push v s \\<equiv> \n(if \\<not>isfull s then \n Abs_bstack (v # fst (alist_of s), snd (alist_of s)) \n else s)\"",
        "pop": "definition pop :: \"'a bstack \\<Rightarrow> ('a option \\<times> 'a bstack)\"\nwhere \"pop s \\<equiv> \n(if \\<not> isempty s then \n (Some (hd (fst (alist_of s))), Abs_bstack (tl (fst (alist_of s)), snd (alist_of s))) \n else (None, s))\""
   },
	"formal theorem statement": "theorem bounded_stack_pop_push_inverse:\n  assumes a1:\"\\<not> isempty s\" and a2:\"(v, s0) = pop s\"\n  shows \"push (the v) s0 = s\""
}